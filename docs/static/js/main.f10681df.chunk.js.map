{"version":3,"sources":["RepaymentsTable.js","RepaymentSchedule.js","FixedRepayment.js","FixedTerm.js","App.js","serviceWorker.js","index.js"],"names":["RepaymentsTable","props","rows","currency","Intl","NumberFormat","style","length","Table","striped","responsive","map","month","principal","interest","repayment","closing","key","Math","floor","format","repaymentSchedule","interestCharged","min","max","push","FixedRepayment","state","handleChangePrincipal","bind","handleChangeInterest","handleChangeRepayment","event","target","value","this","setState","number","minimumFractionDigits","maximumFractionDigits","Form","Row","Col","Label","InputGroup","Prepend","Text","FormControl","aria-label","type","placeholder","onChange","Append","reduce","total","disabled","React","Component","FixedTerm","years","months","handleChangeYears","handleChangeMonths","pow","toFixed","calculateRepayment","App","mode","handleChangeMode","class","Container","role","ToggleButtonGroup","name","ToggleButton","renderDetails","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f10681df.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Table } from 'react-bootstrap';\r\n\r\nfunction RepaymentsTable(props) {\r\n  const { rows } = props;\r\n\r\n  const currency = new Intl.NumberFormat('en-AU', {\r\n    style: 'currency',\r\n    currency: 'AUD',\r\n  });\r\n\r\n  return rows.length === 0\r\n    ? <div></div>\r\n    : <Table striped responsive>\r\n        <thead>\r\n          <tr>\r\n            <th>Year</th>\r\n            <th>Month</th>\r\n            <th>Principal</th>\r\n            <th>Interest</th>\r\n            <th>Repayment</th>\r\n            <th>Closing</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>{\r\n          rows.map(([month, principal, interest, repayment, closing]) =>\r\n            <tr key={month}>\r\n              <td>{Math.floor(month / 12)}</td>\r\n              <td>{month % 12}</td>\r\n              <td>{currency.format(principal)}</td>\r\n              <td>{currency.format(interest)}</td>\r\n              <td>{currency.format(repayment)}</td>\r\n              <td>{currency.format(closing)}</td>\r\n            </tr>)\r\n        }</tbody>\r\n      </Table>;\r\n}\r\n\r\nexport default RepaymentsTable;\r\n","const repaymentSchedule = function (principal, interest, repayment) {\r\n  interest = interest / 100.0 / 12;\r\n  const rows = [];\r\n  if (principal && interest && repayment) {\r\n    let month = 1;\r\n    while (principal > 0.01 && month < 600) {\r\n      const interestCharged = (principal - 0) * interest;\r\n      repayment = Math.min(repayment, principal + interestCharged);\r\n      const closing = Math.max(0.00, principal - repayment + interestCharged);\r\n      rows.push([month, principal, interestCharged, repayment, closing]);\r\n      principal = closing;\r\n      month += 1;\r\n    }\r\n  }\r\n  return rows;\r\n};\r\n\r\nexport default repaymentSchedule;","import React from 'react';\r\nimport { Form, FormControl, InputGroup, Row, Col } from 'react-bootstrap';\r\nimport RepaymentsTable from './RepaymentsTable';\r\nimport repaymentSchedule from './RepaymentSchedule';\r\nimport './App.css';\r\n\r\nclass FixedRepayment extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      principal: '',\r\n      interest: '',\r\n      repayment: '',\r\n    };\r\n\r\n    this.handleChangePrincipal = this.handleChangePrincipal.bind(this);\r\n    this.handleChangeInterest = this.handleChangeInterest.bind(this);\r\n    this.handleChangeRepayment = this.handleChangeRepayment.bind(this);\r\n  }\r\n\r\n  handleChangePrincipal(event) {\r\n    const principal = event.target.value;\r\n    this.setState({ principal });\r\n  }\r\n\r\n  handleChangeInterest(event) {\r\n    const interest = event.target.value;\r\n    this.setState({ interest });\r\n  }\r\n\r\n  handleChangeRepayment(event) {\r\n    const repayment = event.target.value;\r\n    this.setState({ repayment });\r\n  }\r\n\r\n  render() {\r\n    const { principal, interest, repayment } = this.state;\r\n    const rows = repaymentSchedule(principal, interest, repayment);\r\n\r\n    const number = new Intl.NumberFormat('en-AU', { minimumFractionDigits: 2, maximumFractionDigits: 2 });\r\n\r\n    return <>\r\n      <Form>\r\n        <Row>\r\n          <Col>\r\n            <Form.Label>Principal Amount</Form.Label>\r\n            <InputGroup>\r\n              <InputGroup.Prepend>\r\n                <InputGroup.Text>$</InputGroup.Text>\r\n              </InputGroup.Prepend>\r\n              <FormControl\r\n                aria-label=\"Principal Amount\"\r\n                type=\"number\"\r\n                placeholder=\"500,000\"\r\n                value={principal}\r\n                onChange={this.handleChangePrincipal} />\r\n              <InputGroup.Append>\r\n                <InputGroup.Text>.00</InputGroup.Text>\r\n              </InputGroup.Append>\r\n            </InputGroup>\r\n          </Col>\r\n          <Col>\r\n            <Form.Label>Interest Rate</Form.Label>\r\n            <InputGroup>\r\n              <FormControl\r\n                aria-label=\"Interest Rate\"\r\n                type=\"number\"\r\n                placeholder=\"3.00\"\r\n                value={interest}\r\n                onChange={this.handleChangeInterest} />\r\n              <InputGroup.Append>\r\n                <InputGroup.Text>%</InputGroup.Text>\r\n              </InputGroup.Append>\r\n            </InputGroup>\r\n          </Col>\r\n          <Col>\r\n            <Form.Label>Monthly Repayment</Form.Label>\r\n            <InputGroup>\r\n              <InputGroup.Prepend>\r\n                <InputGroup.Text>$</InputGroup.Text>\r\n              </InputGroup.Prepend>\r\n              <FormControl\r\n                aria-label=\"Monthly Repayment\"\r\n                type=\"number\"\r\n                placeholder=\"2,000\"\r\n                value={repayment}\r\n                onChange={this.handleChangeRepayment} />\r\n              <InputGroup.Append>\r\n                <InputGroup.Text>.00</InputGroup.Text>\r\n              </InputGroup.Append>\r\n            </InputGroup>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <Form.Label>Total Repayments</Form.Label>\r\n            <InputGroup>\r\n              <InputGroup.Prepend>\r\n                <InputGroup.Text>$</InputGroup.Text>\r\n              </InputGroup.Prepend>\r\n              <FormControl\r\n                aria-label=\"Total Repayments\"\r\n                value={number.format(rows.reduce((total, [, , , repayment]) => total + repayment, 0.00))}\r\n                disabled />\r\n            </InputGroup>\r\n          </Col>\r\n          <Col>\r\n            <Form.Label>Total Interest</Form.Label>\r\n            <InputGroup>\r\n              <InputGroup.Prepend>\r\n                <InputGroup.Text>$</InputGroup.Text>\r\n              </InputGroup.Prepend>\r\n              <FormControl\r\n                aria-label=\"Total Interest\"\r\n                value={number.format(rows.reduce((total, [, , interest]) => total + interest, 0.00))}\r\n                disabled />\r\n            </InputGroup>\r\n          </Col>\r\n          <Col>\r\n            <Form.Label>Term Length</Form.Label>\r\n            <InputGroup>\r\n              <FormControl\r\n                aria-label=\"Term Length\"\r\n                value={Math.floor((rows.length) / 12)}\r\n                disabled />\r\n              <InputGroup.Append>\r\n                <InputGroup.Text>y</InputGroup.Text>\r\n              </InputGroup.Append>\r\n              <FormControl\r\n                aria-label=\"Term Length\"\r\n                value={(rows.length) % 12}\r\n                disabled />\r\n              <InputGroup.Append>\r\n                <InputGroup.Text>m</InputGroup.Text>\r\n              </InputGroup.Append>\r\n            </InputGroup>\r\n          </Col>\r\n        </Row>\r\n      </Form>\r\n      <RepaymentsTable rows={rows} />\r\n    </>;\r\n  }\r\n}\r\n\r\nexport default FixedRepayment;\r\n","import React from 'react';\r\nimport { Form, FormControl, InputGroup, Row, Col } from 'react-bootstrap';\r\nimport RepaymentsTable from './RepaymentsTable';\r\nimport repaymentSchedule from './RepaymentSchedule';\r\nimport './App.css';\r\n\r\nclass FixedTerm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      principal: '',\r\n      interest: '',\r\n      years: 30,\r\n      months: 0,\r\n    };\r\n\r\n    this.handleChangePrincipal = this.handleChangePrincipal.bind(this);\r\n    this.handleChangeInterest = this.handleChangeInterest.bind(this);\r\n    this.handleChangeYears = this.handleChangeYears.bind(this);\r\n    this.handleChangeMonths = this.handleChangeMonths.bind(this);\r\n  }\r\n\r\n  handleChangePrincipal(event) {\r\n    const principal = event.target.value;\r\n    this.setState({ principal });\r\n  }\r\n\r\n  handleChangeInterest(event) {\r\n    const interest = event.target.value;\r\n    this.setState({ interest });\r\n  }\r\n\r\n  handleChangeYears(event) {\r\n    const years = event.target.value;\r\n    this.setState({ years });\r\n  }\r\n\r\n  handleChangeMonths(event) {\r\n    const months = event.target.value;\r\n    this.setState({ months });\r\n  }\r\n\r\n  calculateRepayment(principal, interest, years, months) {\r\n    months += years * 12;\r\n    interest = interest / 100.0 / 12;\r\n    const repayment = principal * (interest * Math.pow(1+interest, months)) / (Math.pow(1+interest, months)-1);\r\n    return +repayment.toFixed(2) + 0.01;\r\n  }\r\n\r\n  render() {\r\n    const { principal, interest, years, months } = this.state;\r\n    const repayment = this.calculateRepayment(principal, interest, years, months);\r\n    const rows = repaymentSchedule(principal, interest, repayment);\r\n\r\n    const number = new Intl.NumberFormat('en-AU', { minimumFractionDigits: 2, maximumFractionDigits: 2 });\r\n\r\n    return <>\r\n      <Form>\r\n        <Row>\r\n          <Col>\r\n            <Form.Label>Principal Amount</Form.Label>\r\n            <InputGroup>\r\n              <InputGroup.Prepend>\r\n                <InputGroup.Text>$</InputGroup.Text>\r\n              </InputGroup.Prepend>\r\n              <FormControl\r\n                aria-label=\"Principal Amount\"\r\n                type=\"number\"\r\n                placeholder=\"500,000\"\r\n                value={principal}\r\n                onChange={this.handleChangePrincipal} />\r\n              <InputGroup.Append>\r\n                <InputGroup.Text>.00</InputGroup.Text>\r\n              </InputGroup.Append>\r\n            </InputGroup>\r\n          </Col>\r\n          <Col>\r\n            <Form.Label>Interest Rate</Form.Label>\r\n            <InputGroup>\r\n              <FormControl\r\n                aria-label=\"Interest Rate\"\r\n                type=\"number\"\r\n                placeholder=\"3.00\"\r\n                value={interest}\r\n                onChange={this.handleChangeInterest} />\r\n              <InputGroup.Append>\r\n                <InputGroup.Text>%</InputGroup.Text>\r\n              </InputGroup.Append>\r\n            </InputGroup>\r\n          </Col>\r\n          <Col>\r\n            <Form.Label>Term Length</Form.Label>\r\n            <InputGroup>\r\n              <FormControl\r\n                aria-label=\"Term Years\"\r\n                type=\"number\"\r\n                placeholder=\"30\"\r\n                value={years}\r\n                onChange={this.handleChangeYears} />\r\n              <InputGroup.Append>\r\n                <InputGroup.Text>y</InputGroup.Text>\r\n              </InputGroup.Append>\r\n              <FormControl\r\n                aria-label=\"Term Months\"\r\n                type=\"number\"\r\n                placeholder=\"0\"\r\n                value={months}\r\n                onChange={this.handleChangeMonths} />\r\n              <InputGroup.Append>\r\n                <InputGroup.Text>m</InputGroup.Text>\r\n              </InputGroup.Append>\r\n            </InputGroup>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <Form.Label>Total Repayments</Form.Label>\r\n            <InputGroup>\r\n              <InputGroup.Prepend>\r\n                <InputGroup.Text>$</InputGroup.Text>\r\n              </InputGroup.Prepend>\r\n              <FormControl\r\n                aria-label=\"Total Repayments\"\r\n                value={number.format(rows.reduce((total, [, , , repayment]) => total + repayment, 0.00))}\r\n                disabled />\r\n            </InputGroup>\r\n          </Col>\r\n          <Col>\r\n            <Form.Label>Total Interest</Form.Label>\r\n            <InputGroup>\r\n              <InputGroup.Prepend>\r\n                <InputGroup.Text>$</InputGroup.Text>\r\n              </InputGroup.Prepend>\r\n              <FormControl\r\n                aria-label=\"Total Interest\"\r\n                value={number.format(rows.reduce((total, [, , interest]) => total + interest, 0.00))}\r\n                disabled />\r\n            </InputGroup>\r\n          </Col>\r\n          <Col>\r\n            <Form.Label>Monthly Repayment</Form.Label>\r\n            <InputGroup>\r\n              <InputGroup.Prepend>\r\n                <InputGroup.Text>$</InputGroup.Text>\r\n              </InputGroup.Prepend>\r\n              <FormControl\r\n                aria-label=\"Monthly Repayment\"\r\n                value={number.format(repayment)}\r\n                disabled />\r\n            </InputGroup>\r\n          </Col>\r\n        </Row>\r\n      </Form>\r\n      <RepaymentsTable rows={rows} />\r\n    </>;\r\n  }\r\n}\r\n\r\nexport default FixedTerm;\r\n","import React from 'react';\nimport { ToggleButtonGroup, ToggleButton, Container, Form } from 'react-bootstrap';\nimport './App.css';\n\nimport FixedRepayment from './FixedRepayment';\nimport FixedTerm from './FixedTerm';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { mode: '' };\n\n    this.handleChangeMode = this.handleChangeMode.bind(this);\n  }\n\n  renderDetails(mode) {\n    switch (mode) {\n      case 'fixed-term':\n        return <FixedTerm />;\n      case 'fixed-repayment':\n        return <FixedRepayment />;\n      default:\n        return <></>;\n    }\n  }\n\n  handleChangeMode(mode) {\n    this.setState({ mode });\n  }\n\n  render() {\n    const { mode } = this.state;\n    return <div class=\"App\">\n      <Container>\n        <h1><span role=\"img\" aria-label=\"Home\">🏡</span> Mortgage Calculator</h1>\n        <Form>\n          <ToggleButtonGroup type=\"radio\" name=\"mode\" onChange={this.handleChangeMode}>\n            <ToggleButton value=\"fixed-term\">Fixed Term</ToggleButton>\n            <ToggleButton value=\"fixed-repayment\">Fixed Repayment</ToggleButton>\n          </ToggleButtonGroup>\n        </Form>\n        {this.renderDetails(mode)}\n      </Container>\n    </div>;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}